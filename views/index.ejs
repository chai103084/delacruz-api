<!DOCTYPE html>

<head>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
	<link rel="stylesheet" href="assets/css/main.css" />
<title>Search Nearby Places</title>
<style>
	body
	{
		margin: 0px;
		padding: 0px;
	}
	#map
	{
		height: 100vh;
		width: calc(50vw - 20px);
		position: fixed !important;
	}
	#list-results
	{
		width: 50vw;
		float: right;
	}
	.list-result
	{
		padding: 20px;
		box-sizing: border-box;
		width: 100%;
		float: left;
		border-top: 2px solid #555;
	}
	.list-result tr > td:first-child
	{
		width: 190px;
	}
	#description,
	.list-result
	{
		font-family: Roboto;
		font-size: 15px;
		font-weight: 300;
	}
	.pac-card
	{
		margin: 10px 10px 0 0;
		border-radius: 2px 0 0 2px;
		box-sizing: border-box;
		-moz-box-sizing: border-box;
		outline: none;
		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
		background-color: #fff;
		font-family: Roboto;
	}
	#pac-container
	{
		padding-bottom: 12px;
		margin-right: 12px;
	}
	.pac-controls
	{
		display: inline-block;
		padding: 5px 11px;
	}
	.pac-controls label
	{
		font-family: Roboto;
		font-size: 13px;
		font-weight: 300;
	}
	#pac-input
	{
		background-color: #fff;
		font-family: Roboto;
		font-size: 15px;
		font-weight: 300;
		margin-left: 12px;
		padding: 0 11px 0 13px;
		text-overflow: ellipsis;
		width: 400px;
	}
	#pac-input:focus
	{
		border-color: #4d90fe;
	}
	#title
	{
		color: #fff;
		background-color: #4d90fe;
		font-size: 25px;
		font-weight: 500;
		padding: 6px 12px;
	}
	#target
	{
		width: 345px;
	}
</style>
				<title>Google Map App</title>
				<meta charset="utf-8" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="stylesheet" href="assets/css/main.css" />
</head>
<body>

<table>
			<h3 id="text-TOP_LEFT"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Enter Your Location: </h3>
			<form>
				<input id="pac-input" class="form-control form-control-lg" type="text" placeholder="Search Box">
			</form>
			<div id="map"></div>
			<div id="list-results"></div>

<script>
function initAutocomplete()
{
	var map = new google.maps.Map(document.getElementById('map'),
	{
		center: {lat: 7.199001, lng: 125.454941},
		zoom: 15,
		mapTypeId: 'roadmap'
	});

	var lr = document.getElementById('list-results');

	/* LOCATE CURRENT LOCATION */
	if (navigator.geolocation)
	{
		navigator.geolocation.getCurrentPosition(function(position)
		{
			var pos = {
				lat: position.coords.latitude,
				lng: position.coords.longitude
			};

			map.setCenter(pos);
		},
		function()
		{
			handleLocationError(true, infoWindow, map.getCenter());
		});
	}


	// Create the search box and link it to the UI element.
	var input = document.getElementById('pac-input');
	var searchBox = new google.maps.places.SearchBox(input);
	map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

	// Bias the SearchBox results towards current map's viewport.
	map.addListener('bounds_changed', function()
	{
		searchBox.setBounds(map.getBounds());
	});

	var markers = [];
	// Listen for the event fired when the user selects a prediction and retrieve
	// more details for that place.
	searchBox.addListener('places_changed', function()
	{
		var places = searchBox.getPlaces();

		if (places.length == 0)
		{
			return;
		}

		// Clear out the old markers.
		markers.forEach(function(marker)
		{
			marker.setMap(null);
		});
		markers = [];

		lr.innerHTML = "";
		var str = "";

		// For each place, get the icon, name and location.
		var bounds = new google.maps.LatLngBounds();
		places.forEach(function(place)
		{
			if (!place.geometry)
			{
				console.log("Returned place contains no geometry");
				return;
			}
			var icon = {
				url: place.icon,
				size: new google.maps.Size(71, 71),
				origin: new google.maps.Point(0, 0),
				anchor: new google.maps.Point(17, 34),
				scaledSize: new google.maps.Size(25, 25)
			};

			// Create a marker for each place.
			markers.push(new google.maps.Marker(
			{
				map: map,
				icon: icon,
				title: place.name,
				position: place.geometry.location

			}));

			str += "<table class='list-result'>";
			str += "<tr><td><b>Name: </b></td><td>"+place.name+"</td></tr>";
			str += "<tr><td><b>Address: </b></td><td>"+place.formatted_address+"</td></tr>";
			str += "<tr><td><b>Coordinates: </b></td><td>"+place.geometry.location+"</td></tr>";
			str += "<tr style='display: none'><td><b>LIST OF PROPERTIES: </b></td><td>"+Object.keys(place)+"</td></tr>";
			str += "</table>";

			if (place.geometry.viewport)
			{
				// Only geocodes have viewport.
				bounds.union(place.geometry.viewport);
			}
			else
			{
				bounds.extend(place.geometry.location);
			}
		});
		map.fitBounds(bounds);
		lr.innerHTML = str;
	});
}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwq70aV1tJG3m5iOwqiZI3E5vdIyLC1fk&libraries=places&callback=initAutocomplete"
async defer></script>

</body>
</html>
